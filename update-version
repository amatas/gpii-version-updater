#!/bin/sh

set -e

components_file="$(dirname "$0")/components.conf"
COMPONENTS=$(grep -v '^#' "$components_file")

for component in $COMPONENTS ; do
    service=$(echo "$component" | awk -F'|' '{print $1}')
    image=$(echo "$component" | awk -F'|' '{print $2}')
    tag=$(echo "$component" | awk -F'|' '{print $3}')
    echo "Looking up '$image:$tag' for service '$service'..."
    api_token=$(\
        curl -L -s \
        --retry 3 --retry-delay 1 --retry-connrefused \
        "https://auth.docker.io/token?service=registry.docker.io&scope=repository:$image:pull" \
        | jq -r .token \
    )
    # This idea is from
    # https://stackoverflow.com/questions/39375421/can-i-get-an-image-digest-without-downloading-the-image.
    api_out=$(\
        curl -L -s \
        --retry 3 --retry-delay 1 --retry-connrefused \
        --head \
        -H "Authorization: Bearer $api_token" \
        -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
        "https://index.docker.io/v2/$image/manifests/$tag" \
    )
    # The 'tr' is because curl outputs headers using network line endings (\r\n)
    # and our tools expect UNIX line endings (\n).
    digest=$(\
        echo "$api_out" \
        | grep 'Docker-Content-Digest' \
        | awk '{print $2}' \
        | tr -d '\r' \
    )
    if [ -z "$digest" ] ; then
        echo "Could not calculate digest for $image:$tag. Aborting."
        echo "Here was the output from the API:"
        echo "$api_out"
        exit 1
    else
        echo "...found digest '$digest'."
    fi

    yaml="$yaml\\n$service: \"$image@$digest\""
done

# Manual YAML construction is silly, but it avoids pulling in a dependency on a yaml library.
outfile="version.yml"
echo "Success! Writing $outfile..."
echo "# This file is generated by https://github.com/gpii-ops/gpii-version-updater." > $outfile
echo "---" >> $outfile
# '-e' doesn't work with OS X (BSD) echo, which emits a literal '-e' instead.
# Without '-e', busybox (GNU-style) echo prints literal '\n' resulting in
# invalid YAML output.
echo -e "$yaml" | grep -v '^-e $' | sort >> $outfile
